;;;; -*- Lisp -*-

;;; Generate random equations with random data
(in-package :hokuspokus)

(defun generate-eq (numops)
  ;; do the constraints check stuff...
  "Generate a feature from an equation with numops operators"
  (let ((fs *feature-space*)
	(bfs *feature-space*))
    (labels ((gen-eq (numops)
	       (cond
		 ((= numops 0)
		  (when (= (length bfs) 0)
		    (setf bfs *feature-space*))
		  (if (<= (length bfs) (length *feature-space*))
		      (let ((rand (select-random bfs)))
			(setf bfs (remove rand bfs))
			rand)
		      (let ((rand (select-random fs)))		      
			(setf bfs (remove rand bfs))
			rand)))
		 (t
		  (let ((op (select-random *operators*)))
		    (if (= (operator-arity op) 1)
			(generate-feature-from-term
			 `(,op ,(gen-eq (1- numops))))
			(let* ((left (random numops))
			       (f (generate-feature-from-term
				   `(,op ,(gen-eq left)
				     ,(gen-eq (- (1- numops) left))))))
			  (unless f
			    (return-from generate-eq nil))
			  f)))))))
      (let ((result (gen-eq numops)))
	(if (< (count-ops (simplify (read-from-string (feature-name result))))
		    numops)
	    nil
	    result)))))

(defun write-eq-data (file)
  "Write the generated data to an arff file"
  (with-open-file (stream file :direction :output :if-exists :supersede)
    (format stream "@relation 'Generated by Hokuspokus for EquationRediscovery'~%~%~
                    ~{@attribute ~(~A~) numeric~^~%~}~
                    ~%~%@data~%~%"
	    (append1 (feature-map #'(lambda (f) (feature-name f)))
		     (remove #\Newline (remove #\ (format nil "~a" (prefix->infix (simplify (read-from-string (feature-name *dependent-var*)))))))))
    ;; output data
    (dotimes (pos (length (feature-datavec (car *feature-space*))))
      (format stream "~{~,4F~^,~}~%"
	      (append1 (feature-map #'(lambda (f) (aref (feature-datavec f) pos)))
		       (aref (feature-datavec *dependent-var*) pos))))))

(defmacro with-generate-eq (&rest args)
  "Call the respective functions with the given settings"
  `(progn
    (setf *feature-space* nil)
    (setf *gen-space* nil)
    (setf *lookahead-space* nil)
    (setf *dependent-var* nil)  
    (setf *feature-runs* nil)
    (setf *constraints* nil)
    (setf *inheritance* nil)
    ,(if (assoc 'debug args)
	   `(setf *debug* t)
	   `(setf *debug* nil))
    ,(when (assoc 'operators args)
	   `(set-operators ,@(cdr (assoc 'operators args))))
    (dotimes (x ,(cadr (assoc 'numargs args)))
      (let ((f (feature-append (format nil "f~A" x))))
	(feature-data-insert (make-random-list ,(cadr (assoc 'examples args))
					       -3 3.0) f)))
    ;; workaround, because new features compute correlation
    (setf *dependent-var* (feature-find "f0" *feature-space*))
    (do ((eq (generate-eq ,(cadr (assoc 'numops args)))
	     (generate-eq ,(cadr (assoc 'numops args)))))
	(eq
	 (setf *dependent-var* eq)))
    ,(when (assoc 'out-file args)
	   `(write-eq-data ,@(cdr (assoc 'out-file args))))
    ,(when (assoc 'output args)
	   `(format t "[~A,~A,~A: ~A]~%" ,(cadr (assoc 'examples args))
	     ,(cadr (assoc 'numops args))
	     ,(cadr (assoc 'numargs args))
	     (feature-name *dependent-var*)))
    ,(when (assoc 'final-words args)
	   `(eval ,(cadr (assoc 'final-words args))))
    'done))

;; changes to other file due to eq rediscovery
;; '- is not commutative for eq rediscovery
;; generate-features checks for rmse < 0.1
;; added some new term reduction steps which _should_ always be fine
;; vec-constp uses a delta now

(defun equation-rediscovery (num-ops num-equations)
  "Do equation rediscovery"
  (with-open-file (out #p"eq_rediscovery.txt" :direction :output :if-exists :supersede)
    (let ((*standard-output* out))
      (dotimes (ops num-ops)
	(dotimes (args (+ 2 ops))
	  (let ((found 0)
		(equations num-equations)
		(preselect (case (1+ ops)
			     (1 1.0)
			     (2 1.0)
			     (3 0.8)
			     (4 0.5)
			     (5 0.3)
			     (6 0.2)
			     (otherwise 0.2))))
	    (format t "[Pre-Select: ~,2F%. Post-Select: ~D. Search Depth: ~D.]~%~
                       [Running with ~D operator~:P and ~D argument~:P.]~%~
                       [Runtime: ~,2F seconds of real time.]~%~
                       [Rediscovered ~A out of ~A equation~:P (~,2F%).]~%~%"
		    (* 100 preselect) 4 (1+ ops)
		    (1+ ops) (1+ args)
		    (runtime
		      (dotimes (eq equations)
			(with-generate-eq
			  ;; for these operators only positive values
			  ;; in the features, e.g. fac ln
			  ;; in fact fac only for ganze zahlen
			  ;; do the constraints check stuff...
			  (operators '+ '* '/ 'sin 'cos 'exp 'sqrt 'log)
			  (output)
			  (numargs (1+ args))
			  (numops (1+ ops))
			  (examples 10)
			  (out-file #p"/tmp/test.arff"))
			(with
			 (in-file #p"/tmp/test.arff")
			 (operators '+ '* '/ 'sin 'cos 'exp 'sqrt 'log)
			 (pre-select :percent preselect)
			 (post-select :abs 4)
			 (depth (1+ ops))
			 (final-select :abs 3)
			 (final-words '(feature-map #'(lambda (f)
							(format t "[~,4F: ~A]~%"
								(rmse (feature-datavec f)
								      (feature-datavec *dependent-var*))
								(feature-name f))))))
			(when (= (length *feature-space*) 1)
			  (incf found))))
		    found equations (* 100.0 (/ found equations)))
	    (force-output))
	  )))))

;(equation-rediscovery 2 3)

;; ops - runtime with 0.2 pre-select - est. runtime with final pre-sel - final pre-sel
;; this is worst case - eq not discovered, and args=ops, therefore over-estimated
;; 1  -  0 s    - 1     s  -  100%
;; 2  -  0.2 s  - 5     s  -  100%
;; 3  -  30  s  - 256 min  -  80%
;; 4  -  326 s  - 212 min  -  50%
;; 5  -  968 s  - 123 min  -  30%    (or 516 min at 40%)
;; 6  -  380 s  - 405 min  -  20%    (estimated with 0.1 pre-sel)

(defun run-multiplier (pre-select numops)
  "Runtime multiplier for equation rediscovery in respect to 0.2 pre-select"
  (/ (expt (/ 1 0.2) numops) (expt (/ 1 pre-select) numops)))
